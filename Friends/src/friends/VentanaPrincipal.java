/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package friends;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;

/**
 *
 * @author faidh
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        name = new javax.swing.JLabel();
        number = new javax.swing.JLabel();
        create = new javax.swing.JButton();
        read = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        campoName = new javax.swing.JTextField();
        campoNumber = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        name.setText("Name");

        number.setText("Number");

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        read.setText("Read");
        read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        campoName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(name)
                            .addComponent(number))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(campoName)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(create)
                        .addGap(18, 18, 18)
                        .addComponent(read)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clear)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name)
                    .addComponent(campoName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(number)
                    .addComponent(campoNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create)
                    .addComponent(read)
                    .addComponent(update)
                    .addComponent(delete)
                    .addComponent(clear))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    
    
    
    private void campoNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNameActionPerformed

    
    
    
    
    
    
    
    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        try {
            String newName = campoName.getText();
            
            String numberText = campoNumber.getText();

            if (newName.isEmpty() || numberText.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No ha ingresado datos en Name o Number.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            long newNumber = Long.parseLong(numberText);

            String nameNumberString;
            String name;
            long number;

            File file = new File("friendsContact.txt");

            if (!file.exists()) {
                file.createNewFile();
            }

            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            boolean exists = false;


            while (raf.getFilePointer() < raf.length()) {
                nameNumberString = raf.readLine();
                String[] lineSplit = nameNumberString.split("!");

                name = lineSplit[0];

                if (name.equalsIgnoreCase(newName)) {
                    exists = true;
                    break;
                }
            }

            if (exists) {
                JOptionPane.showMessageDialog(null, "No se pueden crear dos amigos con el mismo nombre. Este nombre ya está en la base de datos.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
            } else {
                
                nameNumberString = newName + "!" + newNumber;
                raf.writeBytes(nameNumberString);
                raf.writeBytes(System.lineSeparator());

                JOptionPane.showMessageDialog(null, "Amigo creado correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }

            raf.close();
        }

	catch (IOException ioe) {

            System.out.println(ioe);
	}
	
        catch (NumberFormatException nef) {

            System.out.println(nef);
	}
    }//GEN-LAST:event_createActionPerformed

    
    
    
    
    
    
    
    
    
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        campoName.setText("");
        campoNumber.setText("");
    }//GEN-LAST:event_clearActionPerformed

    
    
    
    
    
    private void readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readActionPerformed
        try {
                        
            String newName= campoName.getText();
            
            String nameNumberString;
            String name;
            long number;
            int index;
            
            File file = new File("friendsContact.txt");
        	
            if (!file.exists()) {
            
                file.createNewFile();
	    
            }

			
	    RandomAccessFile raf = new RandomAccessFile(file, "rw");
	    boolean found = false;

	    while (raf.getFilePointer() < raf.length()) {
                nameNumberString = raf.readLine();
        	String[] lineSplit= nameNumberString.split("!");
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);

                if (name.equals(newName)){
                    found = true;
                    campoName.setText(String.valueOf(name));
                    campoNumber.setText(String.valueOf(number)); 
                }
                
                
            }
            if (found == false ){
                JOptionPane.showMessageDialog(null, "El amigo no existe","INFORMATION_MESSAGE",JOptionPane.INFORMATION_MESSAGE);

                
            }                
                        
                        
        }
	catch (IOException ioe){
            System.out.println(ioe);
	}
	
        catch (NumberFormatException nef){
            System.out.println(nef);
	}
    }//GEN-LAST:event_readActionPerformed

    
    
    
    
    
    
    
    
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed

        try {
            String updateName = campoName.getText();
            String numberText = campoNumber.getText();

            if (updateName.isEmpty() || numberText.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No ha ingresado datos en Name o Number.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            long newNumber = Long.parseLong(numberText);

            File file = new File("friendsContact.txt");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(null, "El archivo de contactos no existe.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            String nameNumberString;
            String name;
            boolean found = false;

            while (raf.getFilePointer() < raf.length()) {
                long pointer = raf.getFilePointer();
                nameNumberString = raf.readLine();
                String[] lineSplit = nameNumberString.split("!");

                name = lineSplit[0];

                if (name.equalsIgnoreCase(updateName)) {
                    found = true;
                    raf.seek(pointer);
                    nameNumberString = updateName + "!" + newNumber;
                    raf.writeBytes(nameNumberString);
                    JOptionPane.showMessageDialog(null, "Amigo actualizado correctamente.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            }

            if (!found) {
                JOptionPane.showMessageDialog(null, "Amigo no existe en la base de datos.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
            }

            raf.close();
        }    
        catch (IOException ioe) {
            System.out.println(ioe);
	}

	catch (NumberFormatException nef) {
            System.out.println(nef);
	}
    }//GEN-LAST:event_updateActionPerformed

    
    
    
    
    
    
    
    
    
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        try {
            String deleteName = campoName.getText();
            String deleteNumberText = campoNumber.getText();

            if (deleteName.isEmpty() || deleteNumberText.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe ingresar nombre y número para eliminar.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            long deleteNumber = Long.parseLong(deleteNumberText);

            File file = new File("friendsContact.txt");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(null, "El archivo de contactos no existe.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            StringBuilder sb = new StringBuilder();
            String currentLine;
            boolean deleted = false;

            // Leer el archivo línea por línea
            while (raf.getFilePointer() < raf.length()) {
                currentLine = raf.readLine();
                String[] lineSplit = currentLine.split("!");

                String name = lineSplit[0];
                long number = Long.parseLong(lineSplit[1]);

                if (name.equalsIgnoreCase(deleteName) && number == deleteNumber) {
                    deleted = true; 
                    continue; 
                }

                sb.append(currentLine).append(System.lineSeparator());
            }

            raf.setLength(0); 
            raf.writeBytes(sb.toString());
            raf.close();

            if (deleted) {
                JOptionPane.showMessageDialog(null, "Amigo eliminado correctamente.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "No se ha encontrado un amigo con ese nombre y número.", "INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
            }

        }        
        
        catch (IOException ioe) {
            System.out.println(ioe);
        }
	
    }//GEN-LAST:event_deleteActionPerformed

    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campoName;
    private javax.swing.JTextField campoNumber;
    private javax.swing.JButton clear;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JLabel name;
    private javax.swing.JLabel number;
    private javax.swing.JButton read;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
